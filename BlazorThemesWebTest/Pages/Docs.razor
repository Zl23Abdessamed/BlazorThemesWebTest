@page "/docs"
@using BlazorThemes.Services
@inject BlazorThemesService ThemeService

<PageTitle>BlazorThemes - Documentation</PageTitle>

<div class="container py-5 docs-page-main-container">
    <h1 class="mb-4">BlazorThemes --Documentation</h1>

    <!-- Getting Started -->
    <section class="mb-5">
        <h2 class="mb-3 border-bottom pb-2">Getting Started</h2>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Installation</h3>
                <p>Add the BlazorThemes package to your project:</p>
                <pre><code>dotnet add package BlazorThemes</code></pre>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Basic Setup</h3>
                <p>Add the service in Program.cs:</p>
                <pre><code>builder.Services.AddBlazorThemes();</code></pre>

                <p class="mt-3">Wrap your app with the ThemeProvider:</p>
                <pre><code>&lt;ThemeProvider&gt;
    &lt;Router AppAssembly="@@typeof(App).Assembly"&gt;
        &lt;Found Context="routeData"&gt;
            &lt;RouteView RouteData="@@routeData" DefaultLayout="@@typeof(MainLayout)" /&gt;
        &lt;/Found&gt;
    &lt;/Router&gt;
&lt;/ThemeProvider&gt;</code></pre>
            </div>
        </div>
    </section>

    <!-- Basic Usage -->
    <section class="mb-5">
        <h2 class="mb-3 border-bottom pb-2">Basic Usage</h2>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Theme Switching</h3>
                <p>Code to switch themes:</p>
                <pre><code>// In your component
@@inject BlazorThemesService ThemeService

&lt;button @@onclick="() =&gt; ThemeService.SetThemeAsync("light")"&gt;Light&lt;/button&gt;
&lt;button @@onclick="() =&gt; ThemeService.SetThemeAsync("dark")"&gt;Dark&lt;/button&gt;
&lt;button @@onclick="() =&gt; ThemeService.SetThemeAsync("auto")"&gt;System&lt;/button&gt;</code></pre>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Accessing Theme State</h3>
                <pre><code>// In your component
@@if (ThemeService.IsLightTheme) {
    &lt;div&gt;Light theme is active&lt;/div&gt;
}
else if (ThemeService.IsDarkTheme) {
    &lt;div&gt;Dark theme is active&lt;/div&gt;
}

&lt;p&gt;Current theme: @@ThemeService.CurrentTheme&lt;/p&gt;
&lt;p&gt;Resolved theme: @@ThemeService.ResolvedTheme&lt;/p&gt;
&lt;p&gt;System theme: @@ThemeService.SystemTheme&lt;/p&gt;</code></pre>
            </div>
        </div>
    </section>

    <!-- Advanced Features - Focused on Code Examples -->
    <section class="mb-5">
        <h2 class="mb-3 border-bottom pb-2">Advanced Features</h2>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Theme Transitions</h3>
                <p>Implement smooth transitions when changing themes:</p>

                <h4 class="mt-4">Fade Transition</h4>
                <pre><code>// Simple fade transition
await ThemeService.SetThemeWithTransitionAsync(
    "dark", 
    ThemeTransitionType.Fade,
    300); // Duration in milliseconds</code></pre>

                <h4 class="mt-4">Slide Transition</h4>
                <pre><code>// Slide transition
await ThemeService.SetThemeWithTransitionAsync(
    "light", 
    ThemeTransitionType.Slide,
    400);</code></pre>

                <h4 class="mt-4">Ripple Effect</h4>
                <pre><code>// Ripple effect from click position
@@inject IJSRuntime JSRuntime

&lt;button @@onclick="HandleRippleClick"&gt;Toggle with Ripple&lt;/button&gt;

@@code {
    private async Task HandleRippleClick(MouseEventArgs e)
    {
        await ThemeService.SetThemeWithRippleAsync(
            ThemeService.GetNextTheme(),
            e.ClientX,
            e.ClientY);
    }
}</code></pre>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Scheduled Themes</h3>
                <p>Automatically change themes based on time of day:</p>

                <h4 class="mt-4">Enable Scheduling</h4>
                <pre><code>// In Program.cs
builder.Services.AddBlazorThemes(options =&gt; {
    options.EnableScheduling = true;
    options.ScheduleConfig = new ThemeScheduleConfig {
        LightStart = "06:00",
        DarkStart = "18:00",
        Timezone = "local"
    };
});</code></pre>

                <h4 class="mt-4">Toggle Scheduling at Runtime</h4>
                <pre><code>// Toggle scheduling in your component
&lt;button @@onclick="ToggleScheduling"&gt;
    @@(ThemeService.IsSchedulingEnabled ? "Disable" : "Enable") Scheduling
&lt;/button&gt;

@@code {
    private async Task ToggleScheduling()
    {
        await ThemeService.EnableSchedulingAsync(!ThemeService.IsSchedulingEnabled);
    }
}</code></pre>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Custom Themes</h3>
                <p>Create and register your own themes:</p>

                <h4 class="mt-4">Register Custom Theme</h4>
                <pre><code>// In your component or initialization logic
protected override async Task OnInitializedAsync()
{
    await ThemeService.AddCustomThemeAsync("midnight", new Dictionary&lt;string, string&gt; 
    {
        ["--background"] = "#0a192f",
        ["--text"] = "#ccd6f6",
        ["--primary"] = "#64ffda"
    });
}</code></pre>

                <h4 class="mt-4">Use Custom Theme</h4>
                <pre><code>// Switch to your custom theme
await ThemeService.SetThemeAsync("midnight");</code></pre>

                <h4 class="mt-4">Remove Custom Theme</h4>
                <pre><code>// Remove a custom theme
await ThemeService.RemoveCustomThemeAsync("midnight");</code></pre>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Forced Themes</h3>
                <p>Override user preferences for specific contexts:</p>

                <pre><code>// Force a specific theme
await ThemeService.ForceThemeAsync("dark");

// Clear forced theme (return to user preference)
await ThemeService.ClearForcedThemeAsync();</code></pre>
            </div>
        </div>
    </section>

    <!-- Configuration -->
    <section class="mb-5">
        <h2 class="mb-3 border-bottom pb-2">Configuration Options</h2>

        <div class="card">
            <div class="card-body">
                <h3 class="card-title">ThemeOptions</h3>
                <pre><code>new ThemeOptions {
    // Available themes
    Themes = new[] { "light", "dark", "auto", "custom1", "custom2" },
    
    // Custom themes (will be added to available themes)
    CustomThemes = new[] { "custom1", "custom2" },
    
    // Local storage key
    StorageKey = "theme",
    
    // HTML attribute name
    AttributeName = "data-theme",
    
    // Enable system preference detection
    EnableSystem = true,
    
    // Update color-scheme meta tag
    EnableColorScheme = true,
    
    // Disable transitions during initial load
    DisableTransitionOnChange = true,
    
    // Forced theme (overrides user preference)
    ForcedTheme = null,
    
    // CSP nonce for injected styles
    Nonce = null,
    
    // Debounce delay for theme operations (ms)
    DebounceDelay = 150,
    
    // Default transition duration (ms)
    TransitionDuration = 300,
    
    // Default transition type
    TransitionType = "fade",
    
    // Enable scheduled theme changes
    EnableScheduling = false,
    
    // Scheduling configuration
    ScheduleConfig = new ThemeScheduleConfig {
        LightStart = "06:00",
        DarkStart = "18:00",
        Timezone = "local"
    }
}</code></pre>
            </div>
        </div>
    </section>

    <!-- Best Practices -->
    <section>
        <h2 class="mb-3 border-bottom pb-2">Best Practices</h2>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Theme-Aware Components</h3>
                <pre><code>// Use CSS variables for theme-specific styling
.component {
    background-color: var(--background);
    color: var(--text);
    border: 1px solid var(--border);
}

// In component code
@@if (ThemeService.IsDarkTheme) {
    &lt;div class="dark-overlay"&gt;...&lt;/div&gt;
}</code></pre>
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-body">
                <h3 class="card-title">Theme Initialization</h3>
                <pre><code>// In MainLayout.razor
@@inherits LayoutComponentBase
@@inject BlazorThemesService ThemeService

&lt;div class="@@(ThemeService.IsDarkTheme ? "dark-layout" : "light-layout")"&gt;
    @@Body
&lt;/div&gt;

@@code {
    protected override async Task OnInitializedAsync()
    {
        // Optional: Add custom themes at startup
        await ThemeService.AddCustomThemeAsync("sunset", new Dictionary&lt;string, string&gt; {
            ["--background"] = "#ff7e5f",
            ["--text"] = "#2c3e50"
        });
    }
}</code></pre>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Handling Transitions</h3>
                <pre><code>// Subscribe to transition state changes
protected override void OnInitialized()
{
    ThemeService.OnTransitionStateChanged += HandleTransitionChange;
}

private void HandleTransitionChange(bool isTransitioning)
{
    if (isTransitioning) 
    {
    }
    else 
    {
    }
}

public void Dispose()
{
    ThemeService.OnTransitionStateChanged -= HandleTransitionChange;
}</code></pre>
            </div>
        </div>
    </section>
</div>